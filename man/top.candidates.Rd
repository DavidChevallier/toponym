% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/top_candidates.R
\name{top.candidates}
\alias{top.candidates}
\title{Retrieves the most frequent toponyms in a given polygon relative to the countries}
\usage{
top.candidates(
  countries,
  count,
  len,
  rat,
  type = "$",
  lons,
  lats,
  feat.class = "P"
)
}
\arguments{
\item{countries}{character string. Country code abbreviations or names (use \code{country.data()} for a list of available countries) specifying the toponyms of which countries are checked.}

\item{count}{numeric. The number of the most frequent toponyms which will be tested.}

\item{len}{numeric. The character length of the toponyms}

\item{rat}{numeric. The ratio (a number between 0.0 and 1) of how many occurrences of one toponym need to be in the polygon.}

\item{type}{character string. Either "$" (suffixes) or "^" (prefixes)}

\item{lons}{numeric. Vector of longitudinal coordinates defining the polygon.}

\item{lats}{numeric. Vector of latitudinal coordinates defining the polygon.}

\item{feat.class}{character string with feature classes (check \url{http://download.geonames.org/export/dump/readme.txt} for the list and names of all feature classes in the data). By default, it is \code{p}.}
}
\value{
A data frame printed out and saved in the global environment. It shows the toponyms surpassing the ratio, at what percentage and the frequency.
}
\description{
The function sorts the toponyms in the given countries by frequency. It then tests which lie in the given polygon, printing out a data frame with those toponyms that match the ratio criteria and are, thus, potential candidates for further examination. The coordinates form the polygon, which roughly resembles the Slavic settlement zone in Germany. It is generated with \href{https://www.google.com/maps/about/mymaps/}{Google My Maps}.
}
\examples{
\dontrun{
top.candidates("GB", count = 100, len = 4, rat = .9,
 lons = toponym::danelaw_polygon$lons,
 lats = toponym::danelaw_polygon$lats
 )
## prints and saves a data frame of the top 100 four-character-long endings in Great Britian
## if more than 90\% of the places lie in the newly defined polygon
## which frames the Danelaw


top.candidates(c("BE", "NL") rat = .8,
 lons = toponym::flanders_polygon$lons,
 lats = toponym::flanders_polygon$lats)

## prints and saves a data frame of the top 10 three-character-long endings in Belgium
## and Netherlands viewed as a unit if more than 80\% of the places lie
## in the newly defined polygon which frames Flanders.

.
}

}
